plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'checkstyle'
}

group = 'com.matteodcr'
version = '0.0.1-SNAPSHOT'

spotless {
    java {
        // Use the Google Java formatter
        googleJavaFormat()

        // Alternatively, you can specify a version
        // googleJavaFormat('1.19.2')

        // Optional: Remove unused imports
        importOrder()
        removeUnusedImports()

        // Optional: Add license header
        // licenseHeader '/* Copyright $YEAR */'
    }
}

checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.3.4'
    implementation 'org.springframework.boot:spring-boot-starter-websocket:3.3.3'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.3.4'
    implementation("org.postgresql:postgresql:42.7.3")
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'com.h2database:h2'

}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
    jvmArgs += [
            "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('byte-buddy-agent') }}"
    ]
}
